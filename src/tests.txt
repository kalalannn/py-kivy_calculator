>>> from parse import *
>>> #
>>> # Operations
>>> #
	>>> Plus().eval([1.0,2.0])
	3.0
	>>> Minus().eval([1.0,2.0])
	-1.0
	>>> Multiply().eval([4.0,3.0])
	12.0
	>>> Divide().eval([9.0,3.0])
	3.0
	>>> Power().eval([2.0,3.0])
	8.0
	>>> Factorial().eval([5.0])
	120.0
	>>> Square_root().eval([64.0])
	8.0
	>>> Nroot().eval([4.0,16.0])
	2.0
	>>> Logarithm().eval([10.0])
	1.0
>>> p=Parser()
	
>>> #
>>> # Lexical analysis
>>> #
	>>> print(*p.lexer("1+2"))
	1.0 + 2.0
	>>> print(*p.lexer("2*4"))
	2.0 * 4.0
	>>> print(*p.lexer(""))
	>>> print(*p.lexer("1"))
	1.0
	>>> print(*p.lexer("1.5"))
	1.5
	>>> print(*p.lexer("-5"))
	neg 5.0
	>>> print(*p.lexer("5--2"))
	5.0 - neg 2.0
	>>> print(*p.lexer("-(1)"))
	neg ( 1.0 )
	>>> print(*p.lexer("2*10^(4)"))
	2.0 * 10.0 ^ ( 4.0 )
	>>> print(*p.lexer("++9"))
	9.0
	>>> print(*p.lexer("+-  +9"))
	neg 9.0
	>>> print(*p.lexer("-+-+9"))
	neg neg 9.0
	>>> print(*p.lexer(" 2/3.5\n*2"))
	2.0 / 3.5 * 2.0
	>>> print(*p.lexer("sqrt(-5)"))
	sqrt ( neg 5.0 )
	>>> print(*p.lexer("-fact(5)"))
	neg fact ( 5.0 )
	>>> print(*p.lexer("nroot(2,16,9,2)"))
	nroot ( 2.0 , 16.0 , 9.0 , 2.0 )
	>>> print(*p.lexer("(1+2)  *  (3^2)"))
	( 1.0 + 2.0 ) * ( 3.0 ^ 2.0 )
	>>> print(*p.lexer("2(4)"))
	2.0 * ( 4.0 )
	>>> print(*p.lexer("(4)2"))
	( 4.0 ) * 2.0
	>>> print(*p.lexer("2sqrt(4)"))
	2.0 * sqrt ( 4.0 )
	>>> print(*p.lexer("1log(10)2"))
	1.0 * log ( 10.0 ) * 2.0
	>>> print(*p.lexer("2fact(18,2)"))
	2.0 * fact ( 18.0 , 2.0 )
	>>> print(*p.lexer("2*-3"))
	2.0 * neg 3.0
	>>> print(*p.lexer("some_func(1)"))
	Traceback (most recent call last):
	...
	SyntaxError: function 'some_func' is not defined
	>>> print(*p.lexer("1&2"))
	Traceback (most recent call last):
	...
	SyntaxError: unexpected symbol '&'
	>>> print(*p.lexer("3.14.15"))
	Traceback (most recent call last):
	...
	SyntaxError: '3.14.15' is not a number
	>>> print(*p.lexer(".2"))
	0.2
	>>> print(*p.lexer("2."))
	2.0
	>>> print(*p.lexer("-log()"))
	neg log ( )
	>>> print(*p.lexer("sqrt(,1)"))
	Traceback (most recent call last):
	...
	SyntaxError: unexpected symbol ','
	>>> print(*p.lexer("-"))
	neg
	>>> print(*p.lexer("2**2"))
	Traceback (most recent call last):
	...
	SyntaxError: unexpected symbol '*'
	>>> print(*p.lexer("2*/2"))
	Traceback (most recent call last):
	...
	SyntaxError: unexpected symbol '*'
>>> #
>>> # Syntax analysis
>>> #
	>>> print(*p.shunting_yard([Number(1.0),Plus(),Number(2.0)]))
	1.0 2.0 +
	>>> print(*p.shunting_yard([Number(2.0),Multiply(),Number(4.0)]))
	2.0 4.0 *
	>>> print(*p.shunting_yard([]))
	>>> print(*p.shunting_yard([LBracket(),Number(1.0),RBracket()]))
	1.0
	>>> print(*p.shunting_yard([Negate(),Number(4.0)]))
	4.0 neg
	>>> print(*p.shunting_yard([Square_root(),LBracket(),Number(16.0),RBracket()]))
	16.0 sqrt
	>>> print(*p.shunting_yard([Factorial(),LBracket(),Number(6.0),RBracket()]))
	6.0 fact
	>>> print(*p.shunting_yard([Number(1.0),Plus(),Number(2.0),Multiply(),Number(3.0)]))
	1.0 2.0 3.0 * +
	>>> print(*p.shunting_yard([LBracket(),Number(1.0),Plus(),Number(2.0),RBracket(),Multiply(),Number(3.0)]))
	1.0 2.0 + 3.0 *
	>>> print(*p.shunting_yard([Negate(),Number(2.0),Divide(),Number(3.0)]))
	2.0 neg / 3.0
	>>> print(*p.shunting_yard([Nroot(),LBracket(),Number(2.0),Comma(),Number(4.0),RBracket()]))
	2.0 4.0 nroot
	>>> print(*p.shunting_yard([Square_root(),LBracket(),Number(4.0),RBracket(),Divide(),Number(3.0)]))
	4.0 sqrt 3.0 /
	>>> print(*p.shunting_yard([Number(1.0),RBracket()]))
	Traceback (most recent call last):
	...
	SyntaxError: missing left bracket
	>>> print(*p.shunting_yard([LBracket(),Number(1)]))
	Traceback (most recent call last):
	...
	SyntaxError: missing right bracket
	>>> print(*p.shunting_yard([LBracket(),Number(1.0),Plus(),Number(4.0),RBracket(),Divide(),LBracket(),Number(8.0),Multiply(),Number(4.0),RBracket()]))
	1.0 4.0 + 8.0 4.0 * /
	>>> print(*p.shunting_yard([Number(2.0),Power(),Number(3.0),Power(),Number(2.0)]))
	2.0 3.0 2.0 ^ ^
	>>> print(*p.shunting_yard([Number(3.0),Multiply(),Number(10.0),Power(),LBracket(),Number(3.0),RBracket()]))
	3.0 10.0 3.0 ^ *
>>> #
>>> # Semantic analysis
>>> #
	>>> p.postfix_eval([Number(42.0)])
	42.0
	>>> p.postfix_eval([Number(1.0),Number(2.0),Plus()])
	3.0
	>>> p.postfix_eval([Number(3.0),Number(2.0),Multiply()])
	6.0
	>>> p.postfix_eval([Number(2.0),Number(3.0),Power()])
	8.0
	>>> p.postfix_eval([Number(7.0),Number(2.0),Number(8.0),Multiply(),Plus()])
	23.0
	>>> p.postfix_eval([Number(4.0),Number(16.0),Nroot()])
	2.0
	>>> p.postfix_eval([Number(1.0),Number(1.0),Number(1.0),Number(1.0),Number(1.0),Plus(),Plus(),Plus(),Plus()])
	5.0
	>>> p.postfix_eval([Number(4.0),Negate(),Number(0.5),Divide()])
	-8.0
	>>> p.postfix_eval([Number(1.0),Number(2.0),Square_root()])
	Traceback (most recent call last):
	...
	SyntaxError: leftover parameters
	>>> p.postfix_eval([Number(1.0),Number(1.0),Number(2.0),Multiply()])
	Traceback (most recent call last):
	...
	SyntaxError: leftover parameters
	>>> p.postfix_eval([Factorial()])
	Traceback (most recent call last):
	...
	SyntaxError: function 'fact' takes 1 parameters, but only 0 were given
	>>> p.postfix_eval([Number(4.0),Nroot()])
	Traceback (most recent call last):
	...
	SyntaxError: function 'nroot' takes 2 parameters, but only 1 were given
	>>> p.postfix_eval([Number(4.0),Plus()])
	Traceback (most recent call last):
	...
	SyntaxError: operator '+' takes 2 arguments, but only 1 were given
	>>> p.postfix_eval([Number(4.0),Divide()])
	Traceback (most recent call last):
	...
	SyntaxError: operator '/' takes 2 arguments, but only 1 were given
	>>> p.postfix_eval([Number(5.0),Minus()])
	Traceback (most recent call last):
	...
	SyntaxError: operator '-' takes 2 arguments, but only 1 were given
>>> #
>>> # Complete parser
>>> #
	>>> p.parse("42+0")
	42.0
	>>> p.parse("3*6")
	18.0
	>>> p.parse("1+2*3")
	7.0
	>>> p.parse("----1-1")
	0.0
	>>> p.parse("-(-(-(2)))")
	-2.0
	>>> p.parse("")
	>>> p.parse("fact(5)")
	120.0
	>>> p.parse("2^3")
	8.0
	>>> p.parse("sqrt(16)")
	4.0
	>>> p.parse("nroot(3,8)")
	2.0
	>>> p.parse("log(10)")
	1.0
	>>> p.parse("(1+2)*3")
	9.0
	>>> p.parse("(1+2)*(2+1)")
	9.0
	>>> p.parse("1.5+0.5")
	2.0
	>>> p.parse("---3.5--5.5")
	2.0
	>>> p.parse("-2^3")
	-8.0
	>>> p.parse("-(2*(1+2))/-(sqrt(4))")
	3.0
	>>> p.parse("-(2*   \n (1+   \t 2))/-(       \nsqrt(4))")
	3.0
	>>> p.parse("+-+-+-+-4-+2")
	2.0
	>>> p.parse("4+3*2^2")
	16.0
	>>> p.parse("2^-1")
	0.5
	>>> p.parse("2*10^3")
	2000.0
	>>> p.parse("2..0")
	Traceback (most recent call last):
	...
	SyntaxError: '2..0' is not a number
	>>> p.parse("fake(1,2)")
	Traceback (most recent call last):
	...
	SyntaxError: function 'fake' is not defined
	>>> p.parse("sqrt(1,2,3)")
	Traceback (most recent call last):
	...
	SyntaxError: leftover parameters
	>>> p.parse("1:2")
	Traceback (most recent call last):
	...
	SyntaxError: unexpected symbol ':'
	>>> p.parse("(1+2")
	Traceback (most recent call last):
	...
	SyntaxError: missing right bracket
	>>> p.parse("1+2)")
	Traceback (most recent call last):
	...
	SyntaxError: missing left bracket
	>>> p.parse("nroot(1)")
	Traceback (most recent call last):
	...
	SyntaxError: function 'nroot' takes 2 parameters, but only 1 were given
	>>> p.parse("nroot()")
	Traceback (most recent call last):
	...
	SyntaxError: function 'nroot' takes 2 parameters, but only 0 were given
	>>> p.parse("1+")
	Traceback (most recent call last):
	...
	SyntaxError: operator '+' takes 2 arguments, but only 1 were given
	>>> p.parse("+1")
	1.0
	